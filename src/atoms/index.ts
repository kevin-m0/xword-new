import { AssetType, Document, VideoModel, Workspace } from "@prisma/client";
import { CollabHistoryVersion } from "@tiptap-pro/extension-collaboration-history";
import { Editor } from "@tiptap/react";
import { atom } from "jotai";
import { DocumentSidebarTabs, PromptLibraryProps, StoryboardStyle } from "~/types";

type DragComponent = {
  type: "link" | "card";
  document: Document;
};

interface ImageAsset {
  id: string;
  assetKey: string;
  assetName?: string;
  prompt?: string;
  assetType: string;
  workspaceId: string;
  folderId?: string;
}

export enum SIDEBARVIEWENUM {
  AiSidebar = "AiSidebar",
  VersionHistory = "Version History",
  Thread = "Thread",
}

export enum MODEL_TYPE {
  "WIZARD" = "wizard",
  "CHAT_GPT" = "chat-gpt",
}

export enum CHATSONIC_MODE {
  Normal = "Normal",
  Document = "Document",
  Web = "Web",
}

export enum PHOTOSONIC_MODE {
  "Simple",
  "Real Time",
}

// Global state for brandVoice
export const brandVoiceAtom = atom<object | null>(null);

// Global state for modelType
export const modelTypeAtom = atom<MODEL_TYPE>(MODEL_TYPE.WIZARD);

export const folderAtom = atom<string>("");
export const activeSpaceAtom = atom<Workspace | null>(null);
export const dragComponent = atom<DragComponent | null>(null);
export const isDocumentDragging = atom<boolean>(false);
export const activeDocTitle = atom<string>("");
export const documentSidebarTabsAtom = atom<DocumentSidebarTabs>("documents");
export const documentsSidebarSearchAtom = atom("");
export const assetLibrarySearchAtom = atom("");
export const docsOrderAtom = atom<string>("recent");

// Global state to store the loading status of Yjs provider.
export const yjsProviderLoading = atom<boolean>(false);

//related to document versioning
export const currentDocumentVersionAtom = atom<number>(0);
export const documentVersionsAtom = atom<CollabHistoryVersion[]>([]);
export const latestDocumentVersionAtom = atom<number>(0);
export const currentDocumentVersionIdAtom = atom<number>(0); //referse to currently selcted document for preview
export const hasChangesInDocAtom = atom<boolean>(false);

// Global state to store the url of current audio being played.
export const audioURL = atom<string | null>(null);
export const audioTitle = atom<string | null>(null);

// export const imageCurrentState = atom<ImageData[] | null>(null);
export const imageCurrentState = atom<ImageAsset[] | null>(null);
export const aiImagesLoadingState = atom<boolean>(false);
export const aiImageLoadingRatio = atom<string>("1024x768");
export const aiImageCount = atom<number>(1);
export const currentGeneratingPrompt = atom<string>("");

export const refetchTrigger = atom<boolean>(false);

export const editorState = atom<boolean>(false);
export const editorObject = atom<Editor | undefined>(undefined);

export const sidebarViewAtom = atom<SIDEBARVIEWENUM>(SIDEBARVIEWENUM.AiSidebar);
export const threadInputAtom = atom<string>("");

export const realTimeImageAtom = atom<string | null>(null);

export const isGeneratingRealtimeImageAtom = atom<boolean>(false);

export const isGeneratingResponseAtom = atom<boolean>(false);
// Global state to store the preview generated by the AI.
export const aiPreview = atom<string | undefined>(undefined);

// Global state to store the loading status of the AI preview.
export const aiPreviewLoading = atom<boolean>(false);

// Global state to store the user responses for the AI.
export const userResponses = atom<any>({});

// Regenerate flag to trigger the regeneration of the AI preview.
export const regenerateFlag = atom<boolean>(false);

// To store audio generation details
export const audioEmotionAtom = atom<string | null>(null);
// export const audioLanguageAtom = atom<LanguageModel | null>(null);
export const audioApplyToAllParaAtom = atom<boolean>(false);
export const audioVoiceStyleIdAtom = atom<string | null>(null);
export const audioVoiceStyleNameAtom = atom<string | null>(null);

// To store the active script for edit
// export const activeScriptAtom = atom<ExtendedScript | null>(null);
export const keywordsPlannerState = atom<boolean>(false);
export const articleMergerState = atom<boolean>(false);

//it will be array of selcting userId for selcting assets of selcted users
export const userIdsForAssetFetchAtom = atom<string[]>([]);

export const importAudioVideoAtom = atom<boolean>(false);
export const recordingAtom = atom<any | null>(null);

// collapse folder menu
export const collapseFolderMenuAtom = atom<boolean>(false);
export const contentResponseAtom = atom<string>("");
export const contentInputAtom = atom<string>("");
export const promptAccordionAtom = atom("");
export const promptLoadingAtom = atom<boolean>(false);

//dialogFlow
export const selectedPromptAtom = atom<PromptLibraryProps | null>(null);

// atom for selectedTool in ContentGen
export const selectedToolAtom = atom<string>("");
export const selectedToolTitleAtom = atom<string>("");

export const chatsonicModeAtom = atom<CHATSONIC_MODE>(CHATSONIC_MODE.Normal);

export const assetLibraryTypeFilterAtom = atom<AssetType | undefined>(
  undefined,
);

export const contextTypeAtom = atom<string>("");
export const uploadedFileAtom = atom<string>("");
export const youTubeModeAtom = atom<boolean>(false);
export const youTubeUrlAtom = atom<string>("");
export const transcriptionAtom = atom<string>("");

// To store previous sessionId
export const previousSessionAtom = atom<string | null>(null);

export const photosonicModeAtom = atom<PHOTOSONIC_MODE>(PHOTOSONIC_MODE.Simple);

export const promptsAtom = atom<PromptLibraryProps[]>([]);
export const promptCategoryAtom = atom<string[]>([]);
export const videoUrlAtom = atom<string>("");

export const editorExpandedAtom = atom<boolean>(true);

export const storyBoardScriptAtom = atom<string>("");
export const storyboardStyleAtom = atom<StoryboardStyle>("realistic");
export const finalStoryboardVideoAtom = atom<string>("");

export const isInstagramConnectedAtom = atom<boolean>(false);
export const isFacebookConnectedAtom = atom<boolean>(false);
export const isYoutubeConnectedAtom = atom<boolean>(false);
export const isTwitterConnectedAtom = atom<boolean>(false);
export const isLinkedInConnectedAtom = atom<boolean>(false);
